I"{0<h3 id="着色模型">着色模型</h3>

<ul>
  <li>
    <p>flat shading model</p>

    <p>对每个三角面计算光照</p>
  </li>
  <li>
    <p>gouraud shading model(1971)</p>

    <p>计算三角形三个顶点光照，插值颜色(per-pixel)</p>
  </li>
  <li>
    <p>phong shading model(1975)</p>

    <p>插值三角形三个顶点的normal(per-pixel)，计算光照</p>
  </li>
</ul>

<hr />

<h3 id="传统的光照模型">传统的光照模型</h3>

<p>下面列举的模型仅仅因为它们模型简单，效果甚佳而在实时渲染中被广泛应用（实际上大家都在追求基于物理的渲染）</p>

<ul>
  <li>
    <p>lambertian lighting model
   $\I=ka+kd·dot(n,l)$</p>
  </li>
  <li>
    <p>phong lighting model(1975)</p>

    <p>加了指数形式的specular项
   $I=ka+kd·dot(n,l)+ks·dot(reflect,v)^N\ 
   reflect=2(normal·lightdir)·normal−ligtdir$</p>

    <p><img src="https://upload.wikimedia.org/wikipedia/commons/6/6b/Phong_components_version_4.png" alt="" /></p>
  </li>
  <li>
    <p>Blinn–Phong(1977)
  <!-- 由Torrance and Sparrow 1967年的文章启发， -->
  specular部分用$dot(\frac{viewdir+lightdir}{2},normal)$代替，减少计算量</p>

    <p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/e/e9/Blinn_phong_comparison.png/600px-Blinn_phong_comparison.png" alt="" /></p>
  </li>
  <li>
    <p>Oren–Nayar模型
（Rough opaque diffuse surfaces，产生比lambertian更粗糙的漫反射）</p>
  </li>
  <li>
    <p>Minnaert模型 
  在lambertian模型上加了darkening factor，看起来更暗</p>
  </li>
</ul>

<blockquote>
  <p>注：如果有看过原论文的话，会发现有很多问题，像深度剔除，着色，光照模型这些往往在一篇论文中都会涉及</p>
</blockquote>

<hr />

<h3 id="physically-based-shading">physically based shading</h3>

<p>传统的光照模型有很多局限性，很多材质无法表示，如今不管是在实时渲染还是离线渲染所使用的是基于物理的着色模型，以精确描述材质和光的传输过程中能量变化</p>

<p><strong>辐射度量学</strong></p>

<p>名词解释</p>

<table class="table table-bordered">
  <thead>
    <tr>
      <th style="text-align: left">terms</th>
      <th style="text-align: center">description</th>
      <th style="text-align: center">符号</th>
      <th style="text-align: center">计算方式</th>
      <th style="text-align: right">单位</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">Radiant Energy</td>
      <td style="text-align: center">total energy</td>
      <td style="text-align: center">$Q$</td>
      <td style="text-align: center"> </td>
      <td style="text-align: right">$J$</td>
    </tr>
    <tr>
      <td style="text-align: left">Radiant Flux</td>
      <td style="text-align: center">the energy per unit time</td>
      <td style="text-align: center">$\Phi$</td>
      <td style="text-align: center">$\Phi=\frac{dQ}{dt}$</td>
      <td style="text-align: right">$W$</td>
    </tr>
    <tr>
      <td style="text-align: left">Radiant Intensity</td>
      <td style="text-align: center">the energy per unit solid angle</td>
      <td style="text-align: center">$I$</td>
      <td style="text-align: center">$I=\frac{d\Phi}{d\omega}$,$d\omega=dA*r^2$</td>
      <td style="text-align: right">$W/sr$</td>
    </tr>
    <tr>
      <td style="text-align: left">Irradiance</td>
      <td style="text-align: center">the energy per (perpendicular/projected) unit area incident on a surface point.</td>
      <td style="text-align: center">$E$</td>
      <td style="text-align: center">$E(p) =\frac {d\Phi(p)}{dA}$</td>
      <td style="text-align: right">$W/m^2$</td>
    </tr>
    <tr>
      <td style="text-align: left">Radiance</td>
      <td style="text-align: center">energy per unit solid angle per projected unit area</td>
      <td style="text-align: center">$L$</td>
      <td style="text-align: center">$L(p,\omega)=\frac{d^2\Phi(p,\omega)}{d\omega dA\cos\theta}$</td>
      <td style="text-align: right">$W/m^2sr$</td>
    </tr>
  </tbody>
</table>

<p>我们在渲染中计算的量是某个点x沿d方向的radiance</p>

<p>iradiance和radiance的转换关系
$L(p,\omega)=\frac{dE(p)}{d\omega\cos\theta}\ 
E(p)=\int_{\omega\in\Omega} L(p,\omega)\cos\theta d\omega $</p>

<!-- ### microgeometry theory

不是在建模时将模型建成微表面
视一个点的表面法线方向不唯一，呈随机正态分布 -->

<hr />

<h3 id="reflectance-equation">reflectance equation</h3>

<p>着色的计算量$L_i(c,-v)$，c是相机位置，-v是光线方向</p>

<p>不考虑paticipating media，相机接受的$L_i$就是最近点的$L_o$，$L_i(c,-v)=L_o(p,v)$</p>

<p>radiance=物体表面发出的光+反射的其他光线</p>

<p>$L_o(p,v)$ 只由入射光线$l$，出射光线$v$和材质决定，brdf函数（Bidirectional Reflectance Distribution Function）$f(l,v)$定义了光线如何作用于材质</p>

<p><strong>reflectance equation</strong>
$\ L_o(p,v)=\int_{l\in\Omega}f(l,v)L_i(p,l)(n·l)dl$</p>

<p>现在看相机c沿-v方向的radiance=距离c最近点的，某个点的radiance=单位半球面上其他方向入射光的 projected radiance*brdf函数的和</p>

<p>简洁起见，省略p
$\L_o(v)=\int_{l\in\Omega}f(l,v)L_i(l)(n·l)dl$</p>

<p><strong>转换成球面积分</strong></p>

<p>用$\theta$,$\phi$表示方向$l$
$\ dl=\sin\theta d\theta d\phi\ 
n·l=\cos\theta\ 
L_o(\theta_o,\phi_o)=\int_{\phi_i=0}^{2\pi}\int_{\theta_i=0}^{\frac{\pi}{2}}f(\theta_i,\phi_i,\theta_o,\phi_o)\cos\theta_i\sin\theta_i d\theta_i d\phi_i$</p>

<p><strong>物理性对brdf的约束</strong></p>

<ol>
  <li>
    <p>Helmholtz reciprocity principle
 $\f(l,v)=f(v,l)$</p>
  </li>
  <li>
    <p>conservation of energy
 $\∀l,\int_{Ω}f(l,v)(n·v) dω_0 ≤ 1$
能量守恒，反射光能量不能大于入射光</p>
  </li>
</ol>

<p>精确的Helmholtz reciprocity和能量转换对于实时渲染算法不是必须的</p>

<hr />
<h1 id="brdf-models">BRDF Models</h1>

<h3 id="lambert-diffuse">lambert diffuse</h3>

<p>rtr4中定义了directional-hemispherical reflectance $R(l)$描述brdf能量转换的程度</p>

<p>lambertian漫反射的brdf函数是常数，与l，v无关，n·l决定了着色的强度</p>

<p>$R(l)=c\ 
=\int_{}f(l,v)(n·l)dl\ 
=f(l,v)\int_{l\in\Omega}(n·l)dl\ 
=f(l,v)\int_{0}^{2\pi}\int_{0}^{\frac{\pi}{2}}\cos\theta\sin\theta d\theta d\phi\ 
=\pi f(l,v)$
$f(l,v)=\frac{c}{\pi}$</p>

<blockquote>
  <p>注:lambert diffuse是经验模型，not physically correct</p>
</blockquote>

<hr />

<h3 id="fresnel-reflectance">fresnel reflectance</h3>

<ul>
  <li>external reflection</li>
</ul>

<p>光疏-&gt;光密，n1&lt;n2，只有反射
例：空气-&gt;金属</p>

<p>反射夹角与入射夹角相同，方向$r=2(n·l)n-l$</p>

<p><img src="https://www.realtimerendering.com/figures/thumb/RTR4.09.19.jpg" alt="" />
反射光的强度由fresnel reflectance系数$F(\theta)$决定，对于一种材质，$F(\theta)$只由入射光方向与表面法线方向的夹角$\theta$决定，$\theta$越大，$F(\theta)$越大，通常，物体边缘的反射强度更高。</p>

<p>有无fresnel reflectance的片对比（unity）</p>

<p><img src="https://docs.unity3d.com/uploads/Main/StandardShaderFresnelGraduationTable.jpg" alt="" /></p>

<p>schlick给出了一种$F(\theta)$的近似方法</p>

<p>$F(n,l)\approx F_0+(1-F_0)(1-(n·l))^5$
更通用的形式是这一种</p>

<p>$F(n,l)\approx F_0+(F_{90}-F_0)(1-(n·l))^{\frac{1}{p}}$</p>

<p>其中$F_0=(\frac{n1-n2}{n1+n2})^2$，与折射率有关，若从空气入射到材质中一般为$F_0=(\frac{n-1}{n+1})^2$</p>

<p>几种材质的$F(\theta)$曲线，分别是glass，copper，aluminum，chrominum，iron，zinc。分为RGB三个通道，实线是fresnel equation的计算结果，虚线是schlick方法近似的结果，可以看出效果还不错，部分材质需要用更准确的模型描述</p>

<p><img src="https://www.realtimerendering.com/figures/thumb/RTR4.09.22.jpg" alt="" /></p>

<p>银（Ag）和水银（Hg）在rgb三通道的fresnel value都很高，一般用来做镜子，</p>

<ul>
  <li>internal reflectance</li>
</ul>

<p>光密-&gt;光疏，n1&gt;n2，发生反射+折射，只会发生在电介质中</p>

<p><img src="https://www.realtimerendering.com/figures/thumb/RTR4.09.23.jpg" alt="" /></p>

<p>折射方向由snell law计算</p>

<p>$sin_{\theta_i}\cdot n_1=sin_{\theta_t}\cdot n_2$
$\ \theta_t$始终大于$\theta_i$，小于1
$\ \theta_i&gt;\theta_c$时发生全反射</p>

<p>反射光强度将external的$F_0\to F_{90}$映射到了$F_0\to F_{\theta_c}$，一张对比图</p>

<p><img src="https://www.realtimerendering.com/figures/thumb/RTR4.09.24.jpg" alt="" /></p>

<p>internal reflection总是偏大些（Ex：水下的气泡总是有很强的反射）</p>

<p><strong>参数化</strong></p>

<p>一般diffuse用$\rho_{ss}$，specular用$F_0$，一些厂商在实现上由于和美术对接/性能等原因使用了不同的参数化方法，包括</p>

<ol>
  <li>
    <p>A Realistic Lighting Model for Computer Animators
用metalness表示F项
最新版
Reflection Model Design for WALL-E and Up
unity standard shader的参数是smoothness和metalness</p>
  </li>
  <li>Physically Based Shading at Disney
disney shading model中specular scalar参数来限制$F_0$范围，几个变种，Real Shading in Unreal Engine 4，Moving Frostbite to Physically Based Rendering，Rendering of Call of Duty Infinite Warfare,</li>
  <li>对于$F_0&gt;0.02$这个特性，一些厂商还做了优化</li>
</ol>

<hr />

<h3 id="microgemotry">microgemotry</h3>

<p>不是在建模时将模型建成微表面！</p>

<p><strong>NDF ${D(m)}$</strong></p>

<p>表面法线方向不唯一，呈随机正态分布，聚集在$n$附近，视微表面法线方向为$m$，法线分布函数NDF定义为$D(m)$
$D(m)$在球面上积分为</p>

<p>$\int_{m\in\Theta}D(m)(m\cdot n)dm=1$</p>

<p>更通用的形式</p>

<p>$\int_{m\in\Theta}D(m)(v\cdot m)dm=v\cdot n$</p>

<p><strong>几何函数 ${G(l,v,h)}$</strong></p>

<p>考虑反射量的组成，只有那些有光源照射且反射方向=视线方向的微表面才对反射量有贡献。几何函数 $G(l,v,h)$ 描述了这一属性，即 m = h 的未被遮蔽的表面点的百分比</p>

<ul>
  <li>masking function $G_1$</li>
</ul>

<p><img src="https://www.realtimerendering.com/figures/thumb/RTR4.09.32.jpg" alt="" />
渲染计算量只考虑可视表面，即$dot(m,n)&gt;0$的面，背面不可见</p>

<p>$\int_{m\in{\Theta}}G_1(m,v)D(m)(v,m)^+dm=v\cdot n$</p>

<p>Smith masking function 是最常见的$G_1$函数</p>

<p>$G_1(m,v)=\frac{\lambda^+(m,v)}{1+\Lambda(v)}<br />
\lambda^+(x)=\begin{cases}
    1, where x&gt;0<br />
    0, where x&lt;=0
\end{cases}$</p>

<ul>
  <li>joint masking-shadow function $G_2$</li>
</ul>

<p>$G_2$由$G_1$推导而来，描述了可视微表面对光源可见的比例（本文不做具体推导，详见heitz）</p>

<p>最终的$G_2$项
$G_2(l,v,m)=\frac{\lambda^+(m,v)\lambda^+(m,l)}{1+\Lambda(v)+\Lambda(l)}$</p>

<h3 id="反射项brdfcook-torrance">反射项brdf（cook-torrance）</h3>

<p>$f(l,v)=\frac{F(h,l)G(l,v,h)D(h)}{4|n\cdot l||n\cdot v|}$
。</p>

<!-- ### subsurface scattering
 
brdf模型只考虑光线/视线在点的上半球面（光不穿过物体），

 -->

<h3 id="reference">Reference</h3>

<p>《Real-Time Rendering, 4th Edition》
<a href="https://www.scratchapixel.com/lessons/3d-basic-rendering/phong-shader-BRDF">https://www.scratchapixel.com/lessons/3d-basic-rendering/phong-shader-BRDF</a></p>

<p><a href="https://en.wikipedia.org/wiki/List_of_common_shading_algorithms">https://en.wikipedia.org/wiki/List_of_common_shading_algorithms</a>
<a href="https://en.wikipedia.org/wiki/Phong_reflection_model">https://en.wikipedia.org/wiki/Phong_reflection_model</a></p>

<!-- [flat shading](https://www.cs.drexel.edu/~david/Classes/Papers/p443-newell.pdf)
[phong shading ](http://www.cs.northwestern.edu/~ago820/cs395/Papers/Phong_1975.pdf)
[gouraud shading](https://ieeexplore.ieee.org/abstract/document/1671906) -->

<!-- [](http://blog.sina.com.cn/s/blog_415a66f001018bud.html)

[](http://web.cs.wpi.edu/~emmanuel/courses/cs563/S05/projects/surface_reflection_losasso.pdf) -->

<p>https://www.brown.edu/research/labs/mittleman/sites/brown.edu.research.labs.mittleman/files/uploads/lecture13_0.pdf</p>

:ET