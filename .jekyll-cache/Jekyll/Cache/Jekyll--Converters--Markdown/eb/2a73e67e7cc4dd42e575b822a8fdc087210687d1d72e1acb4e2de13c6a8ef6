I"L<h1 id="编译器设计笔记">编译器设计笔记</h1>

<p>notes：看的是中文译本</p>

<p><strong>编译器 vs 解释器</strong></p>

<p>编译器一次性的，把一个某种语言编写的程序作为输入，产生一个等价的程序作为输出，一些编译器产生的等价程序是面向人类的程序设计语言，这种程序还需要进一步编译成为计算机所识别的机器码才能运行</p>
<pre><code class="language-mermaid">	graph LR
	源程序--&gt;编译器--&gt;目标程序
</code></pre>
<p>解释器一行一行读取代码，解释并运行（编译不包括运行）</p>

<pre><code class="language-mermaid">	graph LR
	源程序--&gt;解释器--&gt;结果
</code></pre>

<p><strong>编译器的基本准则</strong></p>

<ol>
  <li>编译器必须保持被编译程序的语义</li>
  <li>编译器必须以某种可察觉的方式改进输入程序</li>
</ol>

<p><strong>编译器结构</strong></p>

<p>两阶段编译器结构，前端专注于理解语言程序，后端专注于将程序映射到目标机</p>

<pre><code class="language-mermaid">	graph LR
	源程序--&gt;前端--&gt;IR--&gt;后端--&gt;目标程序
</code></pre>
<p>输出目标程序前，编译器可以对IR的形式进行多次迭代，生成更好的IR代码，因此引出三阶段编译器结构</p>

<pre><code class="language-mermaid">	graph LR
	源程序--&gt;前端--&gt;IR1--&gt;优化器--&gt;IR2--后端--&gt;目标程序
</code></pre>

<p>前端：</p>

<p>词法分析器：将字符构成的串转换为单词构成的流
语法分析器：判断输入流是否是源语言的一个句子
类型检查：检查输入程序中对名字使用在类型方面是否一致</p>

<p>优化器：分析，转化</p>

<p>后端：</p>

<p>指令选择：将IR重写为目标机操作</p>

<p>寄存器分配：</p>

<p>指令调度</p>

:ET