I"q<h3 id="bresenham直线生成算法">bresenham直线生成算法</h3>

<p>bresenham是一种高效的直线绘制的算法，也是最常用的直线绘制算法</p>

<p>给定两个点 A（x1、y1）和 B（x2、y2）的坐标。在像素的计算机屏幕上查找绘制线 AB 所需的所有中间点</p>

<p>算法步骤伪代码</p>

<blockquote>
  <p>计算<script type="math/tex">dx = abs(x2 - x1), dy = abs(y2 - y1)\\</script>
计算直线的斜率<script type="math/tex">m = dy / dx\\</script>
<script type="math/tex">% <![CDATA[
putpixel(x, y)// ouput\ first\ pixel\\
if \ m > 1\\
    \qquad pk = (2dy - dx)\\
    \qquad for\  x = x1; x < x2; x++\\
    \qquad    if\  pk < 0\\
    \qquad  \qquad      pk = pk + 2dy\\
    \qquad    if\  pk > 0\\
    \qquad    \qquad    pk = pk + 2dy − 2dx\\
    \qquad    \qquad    y++\\
    \qquad    putpixel(x,  y)\\
if\ m < 1\\
  \qquad  pk = (2dx - dy)\\
  \qquad  for\  y = y1; y < y2; y++\\
  \qquad      if\  pk < 0\\
  \qquad     \qquad     |pk = pk + 2dx\\
  \qquad      if\  pk > 0\\
  \qquad     \qquad     pk = pk + 2dx − 2dy\\
  \qquad     \qquad     x++\\
  \qquad      putpixel(x, y) %]]></script></p>
</blockquote>

<p>直线生成算法用于绘制线框图</p>

<p><img src="https://pic.downk.cc/item/5f057f5714195aa594029c67.png" height="200" width="300" /></p>
<h3 id="光栅化">光栅化</h3>

<p><strong>扫描线算法</strong></p>

<p>规定三角形的三个顶点v1，v2，v3的y值y1&lt;y2&lt;y3，我们将三角形分解成上下两部分，根据插值计算出新的点v4</p>

<p><img src="http://www.sunshine2k.de/coding/java/TriangleRasterization/generalTriangle.png" height="200" width="400" />
<img src="https://pic2.zhimg.com/80/v2-8f782cb6db112478d4cf86122abdcba0_720w.jpg" height="200" width="200" /></p>

<p>以三角形的长边为底，一行一行向上/向下绘制像素点。</p>

<p>缺点：插值的精度损失导致的多个三角形间存在接缝的问题</p>

<p><strong>重心坐标算法</strong></p>

<p>计算三角形的bounding box</p>

<p>遍历bounding box内的像素，渲染出在三角形内部的点</p>

<p><strong>重心坐标</strong></p>

<p>已知三角形的三个顶点$v1，v2，v3$</p>

<p>用$\alpha ·v1+\beta·v2+\gamma·v3,\alpha+\beta+\gamma=1$可以表示三角形平面上任意点
如果做约束$\alpha,\beta,\gamma\in[0,1]$,上式可以表示三角形内部的任意点</p>

<p>反过来，如果给定任意点$(x,y)$，我们可以写出它的重心坐标（<a href="http://39.108.54.0/math/barycentric.html">数学推导</a>)</p>

<p>如果重心坐标$\alpha,\beta,\gamma$满足$\alpha,\beta,\gamma\in[0,1]$那么就可以判断点在三角形内</p>

<h3 id="深度测试">深度测试</h3>

<p>经过光栅化的过程，我们已经可以绘制出基本的图形了，但仍有一个问题需要解决，后绘制的图形总是在先绘制的图形前面，也就是我们总能看到最后绘制的图形，这与现实是不相符的，我们用一个数组记录屏幕上每个像素的深度值</p>

<p>由点的重心坐标，对三角形三个点的z值插值
<script type="math/tex">zp=\alpha\ v1.z+\beta\ v2.z+\gamma\ v3.z</script></p>

<p>如果$zp$值小于深度缓冲中相应位置存储的$z$值，将$zp$写入深度缓冲，并绘制出像素的颜色</p>

<p><strong>reference:</strong></p>

<p>https://learnopengl-cn.github.io/</p>

<p>《Real-Time Rendering Fourth Edition》</p>
:ET