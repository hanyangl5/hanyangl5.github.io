I"<<!-- 图形学中的向量一般是4维的，矩阵一般是4×4的，我们定义```Vector4f```，```Matrix4f```来表示这两种数据结构 -->

<h1 id="矩阵变换">矩阵变换</h1>

<h2 id="平移">平移</h2>

<p>平移操作可以把空间中的一个点\(p(p_x,p_y,p_z,1)\)沿\(t(t_x,t_y,t_z)\)方向移动一段距离，需将点p左乘变换矩阵\(T(t)\),
\(\\T(t)=\begin{bmatrix}1 &amp; 0 &amp; 0 &amp; t_x\\0&amp;1&amp;0&amp;t_y\\0&amp;0&amp;1&amp;t_z\\0&amp;0&amp;0&amp;1\\\end{bmatrix}\)</p>

<p>平移后点p的坐标为\(p'=(p_x+t_x, p_y +t_y, p_z +t_z, 1)\)</p>

<hr />

<h2 id="旋转">旋转</h2>

<h3 id="二维旋转">二维旋转</h3>

<h4 id="绕原点的二维旋转">绕原点的二维旋转</h4>

<p><img src="D:\onedrive\Program\blog draft\figures\r2d.png" alt="" />
我们要将p绕旋转\(\phi\)到点\(q\),即需要一个矩阵R，使得</p>

<p>\(q=R*p \\
\begin{bmatrix}rcos(\theta+\phi)\\ 
rsin(\theta+\phi)\end{bmatrix}=R\begin{bmatrix}rcos\theta\\ 
rsin\theta\end{bmatrix}\\\)
\(\begin{bmatrix}rcos\theta cos\phi-rsin\theta sin\phi\\
rsin\theta cos\phi+rcos\theta sin\phi\end{bmatrix}=R\begin{bmatrix} rcos\theta\\ 
rsin\theta\end{bmatrix}\\\)
解得
\(R=\begin{bmatrix}
cos\phi &amp; -sin\phi\\ 
sin\phi&amp; cos\phi
\end{bmatrix}\)</p>

<h4 id="绕任意点的二维旋转">绕任意点的二维旋转</h4>

<ol>
  <li>将旋转点x移动到原点</li>
  <li>绕原点进行二维旋转</li>
  <li>将x移动回原来的位置</li>
</ol>

<h3 id="三维旋转">三维旋转</h3>

<p>空间直角坐标系通常有两种表示方式，左手坐标系和右手坐标系，也是DirectX和OpenGL中不同的地方，本文中的坐标系均以右手坐标系为例</p>

<h4 id="绕轴的旋转">绕轴的旋转</h4>

<ul>
  <li>绕z轴旋转</li>
</ul>

<p><img src="https://pic.downk.cc/item/5f03669014195aa5942e4945.jpg" height="200" width="200" /></p>

<p>\(q=R_z*p\\\)
\(\begin{bmatrix}
rcos(\theta+\phi)\\ 
rsin(\theta+\phi)\\ 0
\end{bmatrix}
=R_z
\begin{bmatrix}rcos\theta\\ 
rsin\theta\\ 0\end{bmatrix}\\\)
\(\begin{bmatrix}
rcos\theta cos\phi-rsin\theta sin\phi\\
rsin\theta cos\phi+rcos\theta sin\phi\\0\\
\end{bmatrix}
=R_z
\begin{bmatrix} rcos\theta\\
rsin\theta\\0 \\
\end{bmatrix}\\\)
解得
\(R_z=\begin{bmatrix}
cos\phi &amp; -sin\phi&amp;0\\ 
sin\phi&amp; cos\phi&amp;0\\
0&amp;0&amp;1
\end{bmatrix}\)</p>

<ul>
  <li>绕x轴旋转</li>
</ul>

<p><img src="https://pic.downk.cc/item/5f03669014195aa5942e493b.jpg" height="200" width="200" /></p>

<p>\(q=R_x*p\\\)
\(\begin{bmatrix}
0\\
rcos(\theta+\phi)\\ 
rsin(\theta+\phi)
\end{bmatrix}
=M
\begin{bmatrix}
0\\
rcos\theta\\ 
rsin\theta
\end{bmatrix}\\\)
\(\begin{bmatrix}
0\\rcos\theta cos\phi-rsin\theta sin\phi\\
rsin\theta cos\phi+rcos\theta sin\phi
\end{bmatrix}
=M\begin{bmatrix} 0\\rcos\theta\\ 
rsin\theta\end{bmatrix}\)</p>

<p>解得
\(R_x=\begin{bmatrix}
1&amp;0&amp;0\\
0&amp;cos\phi&amp;-sin\phi\\
0&amp;sin\phi&amp;cos\phi
\end{bmatrix}\)</p>

<ul>
  <li>绕y轴旋转</li>
</ul>

<p><img src="https://pic.downk.cc/item/5f03669014195aa5942e4940.jpg" height="200" width="200" /></p>

<p>\(q=R_y*p \\\)
\(\begin{bmatrix}
rsin(\theta+\phi)\\0\\rcos(\theta+\phi)
\end{bmatrix}
=R_y
\begin{bmatrix}
rsin\theta\\0\\rcos\theta
\end{bmatrix}\\\)
\(\begin{bmatrix}
rsin\theta cos\phi+rcos\theta sin\phi\\0\\rcos\theta cos\phi-rsin\theta sin\phi
\end{bmatrix}
=R_y
\begin{bmatrix}
rsin\theta\\0\\rcos\theta
\end{bmatrix}\)</p>

<p>解得
\(R_y=\begin{bmatrix}
cos\phi&amp;0&amp;sin\phi\\
0&amp;1&amp;0\\
-sin\phi&amp;0&amp;cos\phi
\end{bmatrix}\)</p>

<p>将上述三个旋转矩阵\(R_x,R_y,R_z\)组合起来
\(R_{x,y,z}(\alpha,\beta,\gamma)=R_x(\alpha)R_y(\beta)R_z(\gamma)\)</p>

<p>这样的旋转也叫Euler旋转</p>

<h4 id="沿任意轴的旋转rodrigues-rotation-formula">沿任意轴的旋转/Rodrigues’ Rotation Formula</h4>

<p>和二维绕任意点旋转类似，我们将旋转轴\(n\)旋转至与坐标轴重合（以\(x\)轴为例），然后绕\(x\)轴旋转\({\alpha}\)，再旋转轴旋转回原来的位置</p>

<p><img src="https://pic.downk.cc/item/5f0aebed14195aa5941fe522.jpg" widht="200" height="200" /></p>

<p>整个流程如下</p>

<p>\(q=M^TR_x(\alpha)Mp\\\)
\(cos\theta=\frac{z}{\sqrt{y^2+z^2}}\\
sin\theta=\frac{y}{\sqrt{y^2+z^2}}\\\)
\(R_x(\theta)=\begin{bmatrix}
1&amp;0&amp;0&amp;0\\
0&amp;\frac{z}{\sqrt{y^2+z^2}}&amp;-\frac{y}{\sqrt{y^2+z^2}}&amp;0\\
0&amp;\frac{y}{\sqrt{y^2+z^2}}&amp;\frac{z}{\sqrt{y^2+z^2}}&amp;0\\
0&amp;0&amp;0&amp;1
\end{bmatrix}\\\)
\(cos\phi=\frac{x}{\sqrt{x^2+y^2+z^2}} \\ 
sin\phi=\frac{\sqrt{y^2+z^2}}{\sqrt{x^2+y^2+z^2}}\\\)
\(R_y(\phi)=\begin{bmatrix}
\frac{x}{\sqrt{x^2+y^2+z^2}}&amp;0&amp;\frac{\sqrt{y^2+z^2}}{\sqrt{x^2+y^2+z^2}}&amp;0\\
0&amp;1&amp;0&amp;0\\
-\frac{\sqrt{y^2+z^2}}{\sqrt{x^2+y^2+z^2}}&amp;0&amp;\frac{x}{\sqrt{x^2+y^2+z^2}}&amp;0\\
0&amp;0&amp;0&amp;1
\end{bmatrix}\\\)
\(R=R_x(-\theta)R_y(-\phi)R_x(\alpha)R_y(\phi)R_x(\theta)\)</p>

<p>最终旋转矩阵
\(R=\begin{bmatrix}
  cos\alpha+(1-cos\alpha)n_x^2&amp;(1-cos\alpha)n_xn_y-n_zsin\alpha&amp;(1-cos\alpha)n_xn_y+n_ysin\alpha\\ 
(1-cos\alpha)n_xn_y+n_zsin\alpha&amp;cos\alpha+(1-cos\alpha)n_y^2&amp;(1-cos\alpha)n_yn_z-nx_sin\alpha\\
(1-cos\alpha)n_xn_z-n_ysin\alpha&amp;(1-cos\alpha)n_yn_z+n_xsin\alpha&amp;cos\alpha+(1-cos\alpha)n_z^2
\end{bmatrix}\\
=cos(\alpha)I+(1-cos\alpha)nn^T+sin\alpha\)</p>

<!-- #### 四元数旋转 -->

<hr />

<h3 id="缩放">缩放</h3>

<p>缩放矩阵的形式如下，可以将某个点沿\(x,y,z\)轴分别缩放\(s_x,s_y,s_z\)倍</p>

\[S(s)=\begin{bmatrix}
  s_x &amp; 0 &amp; 0 &amp; 0\\
  0&amp;s_y&amp;0&amp;0\\
  0&amp;0&amp;s_z&amp;0\\
  0&amp;0&amp;0&amp;1\\
  \end{bmatrix}\]

<hr />

<p><strong>reference:</strong></p>

<p>《Real-Time Rendering Fourth Edition》
https://blog.csdn.net/qq_28773183/article/details/80083607</p>

<p>https://blog.csdn.net/csxiaoshui/article/details/65446125</p>

<p>https://www.cnblogs.com/wtyuan/p/12324495.html</p>

:ET